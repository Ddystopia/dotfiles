#!/bin/bash

trap "pkill -9 -P $$; echo -e ""; exit 0" INT

template_path=/tmp/barstatus

metrics=()

add_to_bar() {
  fn=$1
  interval=$2
  name=${3:-$1}

  printf "barstatus $name" > /proc/$$/comm
  metrics+=("$name")

  while true; do
    value=$($fn)
    echo $value > $template_path.$name

    sleep $interval
  done &
}

# define metrics functions
dte() { echo "🕒️" $(date +"%A, %B %d %H:%M:%S"); }
mem() { echo "📝" $(free -h | awk '/Mem/ {printf "%s/%s\n", $3, $2}'); }
lyt() { echo "🌍" $(xkb-switch); }
cpu() {
  read cpu a b c previdle rest < /proc/stat
  prevtotal=$((a+b+c+previdle))
  sleep 0.5
  read cpu a b c idle rest < /proc/stat
  total=$((a+b+c+idle))

  echo "💻️" "$((100 * (($total - $prevtotal) - ($idle - $previdle))/($total - $prevtotal) ))% cpu"
}
blp() {
  percentage=$(bluetoothctl info | grep "Battery Percentage" | sed 's/.*(\([^)]*\)).*/\1/g')
  if [[ -n $percentage ]]; then
    echo "🎧⚡️" $percentage%
  fi
}
upd() {
  updates=$(checkupdates 2> /dev/null)
  emoji="🔁"

  if [[ "$updates" =~ "linux" ]]; then
    emoji+="!"
  fi

  if (( $(echo "$updates" | wc -w) > 0)); then
    echo $emoji $(echo "$updates" | wc -l)
  fi
}

# add metrics to the bar
add_to_bar cpu 0.00  # sleeps while evaluating
add_to_bar blp 1.00
add_to_bar lyt 0.09
add_to_bar upd 60.0
add_to_bar mem 1.00
add_to_bar dte 0.10

# name process
printf "barstatus" > /proc/$$/comm

# wait for first part of data
sleep 0.01

while true; do
  line=""

  for metric in "${metrics[@]}"; do
    value=$(cat $template_path.$metric 2> /dev/null)
    if [[ -n $value ]]; then
      line+=$value
      line+=" | "
    fi
  done

  if (( $(echo $line | wc -c) >= 3 )); then
    line=${line:0:-3}
  fi

  xsetroot -name "$line"

  sleep 0.19

done

