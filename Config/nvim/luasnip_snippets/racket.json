{
  "#r": {
    "prefix": "#r",
    "body": "#lang racket"
  },
  "#tr": {
    "prefix": "#tr",
    "body": "#lang typed/racket"
  },
  "#rg": {
    "prefix": "#rg",
    "body": "#lang racket/gui"
  },
  "#sb": {
    "prefix": "#sb",
    "body": "#lang scribble/base"
  },
  "#d": {
    "prefix": "#d",
    "body": "#lang datalog"
  },
  "#wi": {
    "prefix": "#wi",
    "body": [
      "#lang web-server/insta",
      ""
    ]
  },
  "def": {
    "prefix": "def",
    "body": "(define $1 $0)"
  },
  "defun": {
    "prefix": "defun",
    "body": [
      "(define ($1)",
      "\t$0)"
    ]
  },
  "defv": {
    "prefix": "defv",
    "description": "\"define-values\"",
    "body": "(define-values ($1) ($0))"
  },
  "defm": {
    "prefix": "defm",
    "description": "\"define/match\"",
    "body": [
      "(define/match ($1)",
      "  [($2) $3]",
      "\t$0)"
    ]
  },
  "defs": {
    "prefix": "defs",
    "description": "\"define-syntax\"",
    "body": [
      "(define-syntax ($1)",
      "\t$0)",
      ""
    ]
  },
  "if": {
    "prefix": "if",
    "body": "(if $1 $2 $0)"
  },
  "ifn": {
    "prefix": "ifn",
    "body": "(if (not $1) $2 $0)"
  },
  "ifl": {
    "prefix": "ifl",
    "body": [
      "(if $1",
      "\t(let ($2)",
      "\t\t$3)",
      "\t$0)"
    ]
  },
  "ifnl": {
    "prefix": "ifnl",
    "body": [
      "(if (not $1)",
      "\t(let ($2)",
      "\t\t$3)",
      "\t$0)"
    ]
  },
  "ifb": {
    "prefix": "ifb",
    "body": [
      "(if $1",
      "\t(begin",
      "\t\t$2)",
      "\t$0)"
    ]
  },
  "ifnb": {
    "prefix": "ifnb",
    "body": [
      "(if (not $1)",
      "\t(begin",
      "\t\t$2)",
      "\t$0)"
    ]
  },
  "when": {
    "prefix": "when",
    "body": [
      "(when $1",
      "\t$0)"
    ]
  },
  "unless": {
    "prefix": "unless",
    "body": "(unless $1 $2 $0)"
  },
  "cond": {
    "prefix": "cond",
    "body": [
      "(cond",
      "\t[($1) $0])"
    ]
  },
  "conde": {
    "prefix": "conde",
    "body": [
      "(cond",
      "\t[($1) $2]",
      "\t[else $0])"
    ]
  },
  "case": {
    "prefix": "case",
    "body": [
      "(case $1",
      "\t[($2) $0])"
    ]
  },
  "match": {
    "prefix": "match",
    "body": [
      "(match $1",
      "\t[($2) $0])",
      ""
    ]
  },
  "for": {
    "prefix": "for",
    "body": [
      "(for ([$1])",
      "\t$0)"
    ]
  },
  "forl": {
    "prefix": "forl",
    "description": "\"for/list\"",
    "body": [
      "(for/list ([$1])",
      "\t$0)"
    ]
  },
  "forf": {
    "prefix": "forf",
    "description": "\"for/fold\"",
    "body": [
      "(for/fold",
      "\t([$1])",
      "\t([$2])",
      "\t$0)"
    ]
  },
  "forfr": {
    "prefix": "forfr",
    "description": "\"for/foldr\"",
    "body": [
      "(for/foldr",
      "\t([$1])",
      "\t([$2])",
      "\t$0)"
    ]
  },
  "fora": {
    "prefix": "fora",
    "description": "\"for/and\"",
    "body": [
      "(for/and ([$1])",
      "\t$0)"
    ]
  },
  "foro": {
    "prefix": "foro",
    "description": "\"for/or\"",
    "body": [
      "(for/or ([$1])",
      "\t$0)"
    ]
  },
  "fors": {
    "prefix": "fors",
    "description": "\"for/sum\"",
    "body": [
      "(for/sum ([$1])",
      "\t$0)"
    ]
  },
  "forp": {
    "prefix": "forp",
    "description": "\"for/product\"",
    "body": [
      "(for/product ([$1])",
      "\t$0)"
    ]
  },
  "forfi": {
    "prefix": "forfi",
    "description": "\"for/first\"",
    "body": [
      "(for/first ([$1])",
      "\t$0)"
    ]
  },
  "forla": {
    "prefix": "forla",
    "description": "\"for/last\"",
    "body": [
      "(for/last ([$1])",
      "\t$0)",
      ""
    ]
  },
  "lambda": {
    "prefix": "lambda",
    "body": "(lambda ($1) $0)"
  },
  "apply": {
    "prefix": "apply",
    "body": "(apply $1 $0)"
  },
  "map": {
    "prefix": "map",
    "body": "(map $1 $0)"
  },
  "filter": {
    "prefix": "filter",
    "body": [
      "(filter $1 $0)",
      ""
    ]
  },
  "req": {
    "prefix": "req",
    "body": "(require $0)"
  },
  "prov": {
    "prefix": "prov",
    "body": [
      "(provide $0)",
      ""
    ]
  },
  "let": {
    "prefix": "let",
    "body": "(let ([$1]) $0)"
  },
  "letcc": {
    "prefix": "letcc",
    "body": "(let/cc here (set! $1 here) $0)"
  },
  "begin": {
    "prefix": "begin",
    "body": [
      "(begin",
      "\t$0)"
    ]
  }
}
