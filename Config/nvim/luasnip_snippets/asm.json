{
  "scode": {
    "prefix": "scode",
    "description": "Start basic code for assembly",
    "body": [
      ".data",
      "",
      "",
      ".text",
      "",
      "",
      ".global main",
      "",
      "",
      "main:",
      "",
      ""
    ]
  },
  "scodes": {
    "prefix": "scodes",
    "description": "Start basic code for assembly with _start label",
    "body": [
      ".data",
      "",
      "",
      ".text",
      "",
      "",
      ".globl _start",
      "",
      "",
      "_start:",
      "",
      ""
    ]
  },
  "lo": {
    "prefix": "lo",
    "description": "Long",
    "body": "$1: .long $2"
  },
  "wo": {
    "prefix": "wo",
    "description": "Word",
    "body": "$1: .word $2"
  },
  "by": {
    "prefix": "by",
    "description": "Byte",
    "body": "$1: .byte $2"
  },
  "sp": {
    "prefix": "sp",
    "description": "Space",
    "body": "$1: .space $2"
  },
  "ai": {
    "prefix": "ai",
    "description": "Ascii",
    "body": "$1: .ascii \"$2\""
  },
  "az": {
    "prefix": "az",
    "description": "Asciz",
    "body": "$1: .asciz \"$2\""
  },
  "ze": {
    "prefix": "ze",
    "description": "Zero",
    "body": "$1: .zero \"$2\""
  },
  "qu": {
    "prefix": "qu",
    "description": "Quad",
    "body": "$1: .quad \"$2\""
  },
  "si": {
    "prefix": "si",
    "description": "Single",
    "body": "$1: .single \"$2\""
  },
  "do": {
    "prefix": "do",
    "description": "Double",
    "body": "$1: .single \"$2\""
  },
  "fl": {
    "prefix": "fl",
    "description": "Float",
    "body": "$1: .single \"$2\""
  },
  "oc": {
    "prefix": "oc",
    "description": "Octa",
    "body": "$1: .single \"$2\""
  },
  "sh": {
    "prefix": "sh",
    "description": "Short",
    "body": "$1: .single \"$2\""
  },
  "exit0": {
    "prefix": "exit0",
    "description": "Exit without error",
    "body": [
      "movl \\$1, %eax",
      "xorl %ebx, %ebx",
      "int \\$0x80",
      ""
    ]
  },
  "exit": {
    "prefix": "exit",
    "description": "Exit with error",
    "body": [
      "mov \\$1, %eax",
      "mov $1, %ebx",
      "int \\$0x80",
      ""
    ]
  },
  "readfstdin": {
    "prefix": "readfstdin",
    "description": "Read fixed length text from stdin",
    "body": [
      "mov \\$3, %eax",
      "mov \\$2, %ebx",
      "mov $1, %ecx",
      "mov $2, %edx",
      "int \\$0x80",
      ""
    ]
  },
  "writestdout": {
    "prefix": "writestdout",
    "description": "Write text to stdout",
    "body": [
      "mov \\$4, %eax",
      "mov \\$1, %ebx",
      "mov $1, %ecx",
      "mov $2, %edx",
      "int \\$0x80",
      ""
    ]
  },
  "writestderr": {
    "prefix": "writestderr",
    "description": "Write text to stderr",
    "body": [
      "mov \\$4, %eax",
      "mov \\$2, %ebx",
      "mov $1, %ecx",
      "mov $2, %edx",
      "int \\$0x80",
      ""
    ]
  },
  "*": {
    "prefix": "*",
    "description": "Multiplication",
    "body": [
      "mov $1, %eax",
      "mul $2",
      ""
    ]
  },
  "/": {
    "prefix": "/",
    "description": "Division",
    "body": [
      "mov $1, %eax",
      "div $2",
      ""
    ]
  },
  "jmpl": {
    "prefix": "jmpl",
    "description": "Conditional lower jump",
    "body": [
      "cmp $1, $2",
      "jl $3 ",
      ""
    ]
  },
  "jmple": {
    "prefix": "jmple",
    "description": "Conditional lower or equal jump",
    "body": [
      "cmp $1, $2",
      "jle $3 ",
      ""
    ]
  },
  "jmpe": {
    "prefix": "jmpe",
    "description": "Conditional equal jump",
    "body": [
      "cmp $1, $2",
      "je $3 ",
      ""
    ]
  },
  "jmpn": {
    "prefix": "jmpn",
    "description": "Conditional not equal jump",
    "body": [
      "cmp $1, $2",
      "jn $3",
      ""
    ]
  },
  "jmpg": {
    "prefix": "jmpg",
    "description": "Conditional greater jump",
    "body": [
      "cmp $1, $2",
      "jg $3",
      ""
    ]
  },
  "jmpge": {
    "prefix": "jmpge",
    "description": "Conditional greater or equal jump",
    "body": [
      "cmp $1, $2",
      "je $3",
      ""
    ]
  },
  "loopn": {
    "prefix": "loopn",
    "description": "Loop n times",
    "body": [
      "mov $1, %ecx",
      "",
      "et_for:",
      "\t$2",
      "",
      "\tloop et_for",
      ""
    ]
  },
  "loopnn": {
    "prefix": "loopnn",
    "description": "Loop n-1 times",
    "body": [
      "mov $1, %ecx",
      "dec %ecx",
      "",
      "et_for:",
      "\t$2",
      "",
      "\tloop et_for",
      ""
    ]
  },
  "loopv": {
    "prefix": "loopv",
    "description": "Loop through a vector",
    "body": [
      "lea $1, %edi",
      "xor %ecx, %ecx",
      "",
      "et_for:",
      "\tcmp %ecx, $2",
      "\tje $3",
      "",
      "\t$4",
      "",
      "\tinc %ecx",
      "\tjmp et_for",
      ""
    ]
  },
  "mul": {
    "prefix": "mul",
    "description": "Multiply",
    "body": [
      "xor %edx, %edx",
      "mov $1, %eax",
      "mul $2"
    ]
  },
  "mul64": {
    "prefix": "mul64",
    "description": "Multiply numbers greater than 2^32",
    "body": [
      "mov $1, %edx",
      "mov $2, %eax",
      "mul $3"
    ]
  },
  "div": {
    "prefix": "div",
    "description": "Divide",
    "body": [
      "xor %edx, %edx",
      "mov $1, %eax",
      "div $2"
    ]
  },
  "div64": {
    "prefix": "div64",
    "description": "Divide numbers greater than 2^32",
    "body": [
      "mov $1, %edx",
      "mov $2, %eax",
      "div $3"
    ]
  },
  "pr": {
    "prefix": "pr",
    "description": "Call printf",
    "body": [
      "pushl $1",
      "call printf",
      "popl $2"
    ]
  },
  "sc": {
    "prefix": "sc",
    "description": "Call scanf",
    "body": [
      "pushl $1",
      "call scanf",
      "popl $2"
    ]
  },
  "mindex": {
    "prefix": "mindex",
    "description": "Current index from a matrix",
    "body": [
      "xor %edx, %edx",
      "movl $1, %eax",
      "mull $2",
      "addl $3, %eax"
    ]
  },
  "ffl": {
    "prefix": "ffl",
    "description": "Call fflush",
    "body": [
      "pushl \\$0",
      "call fflush",
      "popl $1"
    ]
  },
  "at": {
    "prefix": "at",
    "description": "Call atoi",
    "body": [
      "pushl $1",
      "call atoi",
      "popl $2"
    ]
  },
  "len": {
    "prefix": "len",
    "description": "Call strlen",
    "body": [
      "pushl $1",
      "call strlen",
      "popl $2"
    ]
  },
  "proc": {
    "prefix": "proc",
    "description": "Basic procedure",
    "body": [
      "$1:",
      "pushl %ebp",
      "movl %esp, %ebp",
      "",
      "$2",
      "",
      "popl %ebp",
      "ret"
    ]
  }
}
