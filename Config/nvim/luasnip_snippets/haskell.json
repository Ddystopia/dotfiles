{
  "lang": {
    "prefix": "lang",
    "body": "{-# LANGUAGE ${0:OverloadedStrings} #-\\}"
  },
  "haddock": {
    "prefix": "haddock",
    "body": "{-# OPTIONS_HADDOCK ${0:hide} #-\\}"
  },
  "ghc": {
    "prefix": "ghc",
    "body": "{-# OPTIONS_GHC ${0:-fno-warn-unused-imports} #-\\}"
  },
  "inline": {
    "prefix": "inline",
    "body": "{-# INLINE ${0:name} #-\\}"
  },
  "imp": {
    "prefix": "imp",
    "body": "import ${0:Data.Text}"
  },
  "import": {
    "prefix": "import",
    "body": "import ${0:Data.Text}"
  },
  "import2": {
    "prefix": "import2",
    "body": "import ${1:Data.Text} (${0:head})"
  },
  "impq": {
    "prefix": "impq",
    "body": "import qualified ${1:Data.Text} as ${0:T}"
  },
  "importq": {
    "prefix": "importq",
    "body": "import qualified ${1:Data.Text} as ${0:T}"
  },
  "inst": {
    "prefix": "inst",
    "body": [
      "instance ${1:Monoid} ${2:Type} where",
      "\t$0"
    ]
  },
  "ty": {
    "prefix": "ty",
    "body": "type ${1:Type} = ${0:Type}"
  },
  "type": {
    "prefix": "type",
    "body": "type ${1:Type} = ${0:Type}"
  },
  "da": {
    "prefix": "da",
    "body": "data ${1:Type} = ${2:$1} ${0:Int}"
  },
  "data": {
    "prefix": "data",
    "body": "data ${1:Type} = ${2:$1} ${0:Int}"
  },
  "newtype": {
    "prefix": "newtype",
    "body": "newtype ${1:Type} = ${2:$1} ${0:Int}"
  },
  "class": {
    "prefix": "class",
    "body": [
      "class ${1:Class} a where",
      "\t$0"
    ]
  },
  "main": {
    "prefix": "main",
    "body": [
      "main :: IO ()",
      "main = ${0:undefined}"
    ]
  },
  "const": {
    "prefix": "const",
    "body": [
      "${1:name} :: ${2:a}",
      "$1 = ${0:undefined}"
    ]
  },
  "fn": {
    "prefix": "fn",
    "body": [
      "${1:fn} :: ${2:a} -> ${3:a}",
      "$1 $4 = ${0:undefined}"
    ]
  },
  "fn0": {
    "prefix": "fn0",
    "body": [
      "${1:fn} :: ${2:a}",
      "$1 = ${0:undefined}"
    ]
  },
  "fn1": {
    "prefix": "fn1",
    "body": [
      "${1:fn} :: ${2:a} -> ${3:a}",
      "$1 $4 = ${0:undefined}"
    ]
  },
  "fn2": {
    "prefix": "fn2",
    "body": [
      "${1:fn} :: ${2:a} -> ${3:a} -> ${4:a}",
      "$1 $5 = ${0:undefined}"
    ]
  },
  "fn3": {
    "prefix": "fn3",
    "body": [
      "${1:fn} :: ${2:a} -> ${3:a} -> ${4:a} -> ${5:a}",
      "$1 $6 = ${0:undefined}"
    ]
  },
  "=>": {
    "prefix": "=>",
    "description": "\"Type constraint\"",
    "body": "(${1:Class} ${2:a}) => $2"
  },
  "ap": {
    "prefix": "ap",
    "body": "${1:map} ${2:fn} ${0:list}"
  },
  "\\": {
    "prefix": "\\",
    "body": "\\${1:x} -> ${0:expression}"
  },
  "(\\": {
    "prefix": "(\\",
    "body": "(\\${1:x} -> ${0:expression})"
  },
  "<-": {
    "prefix": "<-",
    "body": "${1:a} <- ${0:m a}"
  },
  "->": {
    "prefix": "->",
    "body": "${1:m a} -> ${0:a}"
  },
  "tup": {
    "prefix": "tup",
    "body": "(${1:a}, ${0:b})"
  },
  "tup2": {
    "prefix": "tup2",
    "body": "(${1:a}, ${2:b}, ${0:c})"
  },
  "tup3": {
    "prefix": "tup3",
    "body": "(${1:a}, ${2:b}, ${3:c}, ${0:d})"
  },
  "rec": {
    "prefix": "rec",
    "body": [
      "${1:Record} { ${2:recFieldA} = ${3:undefined}",
      "\t\t\t, ${4:recFieldB} = ${0:undefined}",
      "\t\t\t\\}"
    ]
  },
  "case": {
    "prefix": "case",
    "body": [
      "case ${1:something} of",
      "\t$2 -> $0"
    ]
  },
  "let": {
    "prefix": "let",
    "body": [
      "let $1 = $2",
      "in $3"
    ]
  },
  "where": {
    "prefix": "where",
    "body": [
      "where",
      "\t${1:fn} = ${0:undefined}"
    ]
  },
  "desc": {
    "prefix": "desc",
    "body": [
      "describe \"$1\" \\$ do",
      "\t$0"
    ]
  },
  "it": {
    "prefix": "it",
    "body": [
      "it \"$1\" \\$",
      "\t$0"
    ]
  },
  "itp": {
    "prefix": "itp",
    "body": [
      "it \"$1\" \\$ property \\$",
      "\t$0"
    ]
  },
  "sb": {
    "prefix": "sb",
    "body": "`shouldBe` $0"
  },
  "doc": {
    "prefix": "doc",
    "body": [
      "{-| $0",
      "-\\}"
    ]
  }
}
