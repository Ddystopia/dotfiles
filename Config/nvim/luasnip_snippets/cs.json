{
  "sim": {
    "prefix": "sim",
    "body": [
      "${1:public} static int Main(string[] args)",
      "{",
      "\t$0",
      "\treturn 0;",
      "\\}"
    ]
  },
  "simc": {
    "prefix": "simc",
    "body": [
      "public class Application",
      "{",
      "\t${1:public} static int Main(string[] args)",
      "\t{",
      "\t\t$0",
      "\t\treturn 0;",
      "\t\\}",
      "\\}"
    ]
  },
  "svm": {
    "prefix": "svm",
    "body": [
      "${1:public} static void Main(string[] args)",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "t": {
    "prefix": "t",
    "body": "$1 ? $2 : $0"
  },
  "?": {
    "prefix": "?",
    "body": "$1 ? $2 : $0"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (int ${1:i} = 0; $1 < ${2:count}; $1${3:++})",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "forr": {
    "prefix": "forr",
    "body": [
      "for (int ${1:i} = ${2:length}; $1 >= 0; $1--)",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "fore": {
    "prefix": "fore",
    "body": [
      "foreach (${1:var} ${2:entry} in $3)",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "foreach": {
    "prefix": "foreach",
    "body": [
      "foreach (${1:var} ${2:entry} in $3)",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "each": {
    "prefix": "each",
    "body": [
      "foreach (${1:var} ${2:entry} in $3)",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "prop": {
    "prefix": "prop",
    "body": "${1:public} ${2:int} $3 { get; set; \\}"
  },
  "p": {
    "prefix": "p",
    "body": "${1:public} ${2:int} $3 { get; set; \\}"
  },
  "p+": {
    "prefix": "p+",
    "body": "public ${1:int} $2 { get; set; \\}"
  },
  "p+&": {
    "prefix": "p+&",
    "body": "public ${1:int} $2 { get; internal set; \\}"
  },
  "p+|": {
    "prefix": "p+|",
    "body": "public ${1:int} $2 { get; protected set; \\}"
  },
  "p+-": {
    "prefix": "p+-",
    "body": "public ${1:int} $2 { get; private set; \\}"
  },
  "p&": {
    "prefix": "p&",
    "body": "internal ${1:int} $2 { get; set; \\}"
  },
  "p&|": {
    "prefix": "p&|",
    "body": "internal ${1:int} $2 { get; protected set; \\}"
  },
  "p&-": {
    "prefix": "p&-",
    "body": "internal ${1:int} $2 { get; private set; \\}"
  },
  "p|": {
    "prefix": "p|",
    "body": "protected ${1:int} $2 { get; set; \\}"
  },
  "p|-": {
    "prefix": "p|-",
    "body": "protected ${1:int} $2 { get; private set; \\}"
  },
  "p-": {
    "prefix": "p-",
    "body": "private ${1:int} $2 { get; set; \\}"
  },
  "pi": {
    "prefix": "pi",
    "body": "${1:public} int $2 { get; set; \\}"
  },
  "pi+": {
    "prefix": "pi+",
    "body": "public int $1 { get; set; \\}"
  },
  "pi+&": {
    "prefix": "pi+&",
    "body": "public int $1 { get; internal set; \\}"
  },
  "pi+|": {
    "prefix": "pi+|",
    "body": "public int $1 { get; protected set; \\}"
  },
  "pi+-": {
    "prefix": "pi+-",
    "body": "public int $1 { get; private set; \\}"
  },
  "pi&": {
    "prefix": "pi&",
    "body": "internal int $1 { get; set; \\}"
  },
  "pi&|": {
    "prefix": "pi&|",
    "body": "internal int $1 { get; protected set; \\}"
  },
  "pi&-": {
    "prefix": "pi&-",
    "body": "internal int $1 { get; private set; \\}"
  },
  "pi|": {
    "prefix": "pi|",
    "body": "protected int $1 { get; set; \\}"
  },
  "pi|-": {
    "prefix": "pi|-",
    "body": "protected int $1 { get; private set; \\}"
  },
  "pi-": {
    "prefix": "pi-",
    "body": "private int $1 { get; set; \\}"
  },
  "pb": {
    "prefix": "pb",
    "body": "${1:public} bool $2 { get; set; \\}"
  },
  "pb+": {
    "prefix": "pb+",
    "body": "public bool $1 { get; set; \\}"
  },
  "pb+&": {
    "prefix": "pb+&",
    "body": "public bool $1 { get; internal set; \\}"
  },
  "pb+|": {
    "prefix": "pb+|",
    "body": "public bool $1 { get; protected set; \\}"
  },
  "pb+-": {
    "prefix": "pb+-",
    "body": "public bool $1 { get; private set; \\}"
  },
  "pb&": {
    "prefix": "pb&",
    "body": "internal bool $1 { get; set; \\}"
  },
  "pb&|": {
    "prefix": "pb&|",
    "body": "internal bool $1 { get; protected set; \\}"
  },
  "pb&-": {
    "prefix": "pb&-",
    "body": "internal bool $1 { get; private set; \\}"
  },
  "pb|": {
    "prefix": "pb|",
    "body": "protected bool $1 { get; set; \\}"
  },
  "pb|-": {
    "prefix": "pb|-",
    "body": "protected bool $1 { get; private set; \\}"
  },
  "pb-": {
    "prefix": "pb-",
    "body": "private bool $1 { get; set; \\}"
  },
  "ps": {
    "prefix": "ps",
    "body": "${1:public} string $2 { get; set; \\}"
  },
  "ps+": {
    "prefix": "ps+",
    "body": "public string $1 { get; set; \\}"
  },
  "ps+&": {
    "prefix": "ps+&",
    "body": "public string $1 { get; internal set; \\}"
  },
  "ps+|": {
    "prefix": "ps+|",
    "body": "public string $1 { get; protected set; \\}"
  },
  "ps+-": {
    "prefix": "ps+-",
    "body": "public string $1 { get; private set; \\}"
  },
  "ps&": {
    "prefix": "ps&",
    "body": "internal string $1 { get; set; \\}"
  },
  "ps&|": {
    "prefix": "ps&|",
    "body": "internal string $1 { get; protected set; \\}"
  },
  "ps&-": {
    "prefix": "ps&-",
    "body": "internal string $1 { get; private set; \\}"
  },
  "ps|": {
    "prefix": "ps|",
    "body": "protected string $1 { get; set; \\}"
  },
  "ps|-": {
    "prefix": "ps|-",
    "body": "protected string $1 { get; private set; \\}"
  },
  "ps-": {
    "prefix": "ps-",
    "body": "private string $1 { get; set; \\}"
  },
  "m": {
    "prefix": "m",
    "body": [
      "${1:public} ${2:void} $3($4)",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "m+": {
    "prefix": "m+",
    "body": [
      "public ${1:void} $2($3)",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "m&": {
    "prefix": "m&",
    "body": [
      "internal ${1:void} $2($3)",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "m|": {
    "prefix": "m|",
    "body": [
      "protected ${1:void} $2($3)",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "m-": {
    "prefix": "m-",
    "body": [
      "private ${1:void} $2($3)",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "mi": {
    "prefix": "mi",
    "body": [
      "${1:public} int $2($3)",
      "{",
      "\t${0:return 0;}",
      "\\}"
    ]
  },
  "mi+": {
    "prefix": "mi+",
    "body": [
      "public int $1($2)",
      "{",
      "\t${0:return 0;}",
      "\\}"
    ]
  },
  "mi&": {
    "prefix": "mi&",
    "body": [
      "internal int $1($2)",
      "{",
      "\t${0:return 0;}",
      "\\}"
    ]
  },
  "mi|": {
    "prefix": "mi|",
    "body": [
      "protected int $1($2)",
      "{",
      "\t${0:return 0;}",
      "\\}"
    ]
  },
  "mi-": {
    "prefix": "mi-",
    "body": [
      "private int $1($2)",
      "{",
      "\t${0:return 0;}",
      "\\}"
    ]
  },
  "mb": {
    "prefix": "mb",
    "body": [
      "${1:public} bool $2($3)",
      "{",
      "\t${0:return false;}",
      "\\}"
    ]
  },
  "mb+": {
    "prefix": "mb+",
    "body": [
      "public bool $1($2)",
      "{",
      "\t${0:return false;}",
      "\\}"
    ]
  },
  "mb&": {
    "prefix": "mb&",
    "body": [
      "internal bool $1($2)",
      "{",
      "\t${0:return false;}",
      "\\}"
    ]
  },
  "mb|": {
    "prefix": "mb|",
    "body": [
      "protected bool $1($2)",
      "{",
      "\t${0:return false;}",
      "\\}"
    ]
  },
  "mb-": {
    "prefix": "mb-",
    "body": [
      "private bool $1($2)",
      "{",
      "\t${0:return false;}",
      "\\}"
    ]
  },
  "ms": {
    "prefix": "ms",
    "body": [
      "${1:public} string $2($3)",
      "{",
      "\t${0:return \"\";}",
      "\\}"
    ]
  },
  "ms+": {
    "prefix": "ms+",
    "body": [
      "public string $1($2)",
      "{",
      "\t${0:return \"\";}",
      "\\}"
    ]
  },
  "ms&": {
    "prefix": "ms&",
    "body": [
      "internal string $1($2)",
      "{",
      "\t${0:return \"\";}",
      "\\}"
    ]
  },
  "ms|": {
    "prefix": "ms|",
    "body": [
      "protected string ${1:}(${2:})",
      "{",
      "\t${0:return \"\";}",
      "\\}"
    ]
  },
  "ms-": {
    "prefix": "ms-",
    "body": [
      "private string $1($2)",
      "{",
      "\t${0:return \"\";}",
      "\\}"
    ]
  },
  "enum": {
    "prefix": "enum",
    "body": [
      "enum $1",
      "{",
      "\t$0",
      "\\}",
      ""
    ]
  },
  "enum+": {
    "prefix": "enum+",
    "body": [
      "public enum $1",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "#if": {
    "prefix": "#if",
    "body": [
      "#if",
      "\t$0",
      "#endif"
    ]
  },
  "///": {
    "prefix": "///",
    "body": [
      "/// <summary>",
      "/// $0",
      "/// </summary>"
    ]
  },
  "<p": {
    "prefix": "<p",
    "body": "<param name=\"$1\">${2:$1}</param>"
  },
  "<ex": {
    "prefix": "<ex",
    "body": "<exception cref=\"${1:System.Exception}\">$2</exception>"
  },
  "<r": {
    "prefix": "<r",
    "body": "<returns>$1</returns>"
  },
  "<s": {
    "prefix": "<s",
    "body": "<see cref=\"$1\"/>"
  },
  "<rem": {
    "prefix": "<rem",
    "body": "<remarks>$1</remarks>"
  },
  "<c": {
    "prefix": "<c",
    "body": [
      "<code>$1</code>",
      ""
    ]
  },
  "cw": {
    "prefix": "cw",
    "body": [
      "Console.WriteLine($1);",
      ""
    ]
  },
  "eq": {
    "prefix": "eq",
    "body": [
      "public override bool Equals(object obj)",
      "{",
      "\tif (obj == null || GetType() != obj.GetType())",
      "\t{",
      "\t\treturn false;",
      "\t\\}",
      "\t${0:throw new NotImplementedException();}",
      "\treturn base.Equals(obj);",
      "\\}"
    ]
  },
  "exc": {
    "prefix": "exc",
    "body": [
      "public class ${1:MyException} : ${2:Exception}",
      "{",
      "\tpublic $1() { \\}",
      "\tpublic $1(string message) : base(message) { \\}",
      "\tpublic $1(string message, Exception inner) : base(message, inner) { \\}",
      "\tprotected $1(",
      "\t\tSystem.Runtime.Serialization.SerializationInfo info,",
      "\t\tSystem.Runtime.Serialization.StreamingContext context)",
      "\t\t\t: base(info, context) { \\}",
      "\\}"
    ]
  },
  "index": {
    "prefix": "index",
    "body": [
      "public ${1:object} this[${2:int} index]",
      "{",
      "\tget { $0 \\}",
      "\tset { $0 \\}",
      "\\}"
    ]
  },
  "inv": {
    "prefix": "inv",
    "body": [
      "EventHandler temp = ${1:MyEvent};",
      "if (${2:temp} != null)",
      "{",
      "\t$2();",
      "\\}"
    ]
  },
  "lock": {
    "prefix": "lock",
    "body": [
      "lock (${1:this})",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "namespace": {
    "prefix": "namespace",
    "body": [
      "namespace ${1:MyNamespace}",
      "{",
      "\t$0",
      "\\}"
    ]
  },
  "propr": {
    "prefix": "propr",
    "body": "public ${1:int} ${2:MyProperty} { get; set; \\}"
  },
  "propf": {
    "prefix": "propf",
    "body": [
      "private ${1:int} ${2:myVar};",
      "public $1 ${3:MyProperty}",
      "{",
      "\tget { return $2; \\}",
      "\tset { $2 = value; \\}",
      "\\}"
    ]
  },
  "propg": {
    "prefix": "propg",
    "body": "public ${1:int} ${2:MyProperty} { get; private set; \\}"
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch (${1:switch_on})",
      "{",
      "\t$0",
      "\tdefault:",
      "\\}"
    ]
  },
  "usi": {
    "prefix": "usi",
    "body": [
      "using (${1:resource})",
      "{",
      "\t$0",
      "\\}"
    ]
  }
}
